package ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import logic.CinemaFunction;
import logic.Movie;
import logic.Room;

/**
 *
 * @author PIX
 */
public class FormCreateFunctions extends javax.swing.JFrame{

    /**
     * Creates new form FormCreateFunctions
     */
    public FormCreateFunctions() {
        initComponents();
        Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
        int windowWidth = screenDimension.width/3;
        int windowHeigth = (screenDimension.height/3)*2;
        Dimension windowDimension = new Dimension(windowWidth, windowHeigth);
        setSize(windowDimension);
        content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));
        //add title
        JPanel panelHeader = getPanelHeader();
        //add labelName
        JPanel panelMovieData = getPanelMovieData();
        //add schedule
        JPanel panelSchedule = getPanelSchedule();
        //add image
        JPanel panelImage = getPanelImage();
        //add button
        JPanel panelFooter = getFooterPanel();
        
        //add controls
        content.add(panelHeader);
        content.add(panelMovieData);
        content.add(panelSchedule);
        content.add(panelImage);
        content.add(panelFooter);
        
        content.setBorder(new EmptyBorder(new Insets(10, 10, 10, 10)));
        
        //set the correct view
        setContentPane(content);
        
        //centrate in screen
        setResizable(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCreateFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCreateFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCreateFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCreateFunctions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCreateFunctions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel content;
    // End of variables declaration//GEN-END:variables

    private JPanel getPanelMovieData() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        
        JLabel labelName = new JLabel("Nombre : ");
        labelName.setAlignmentX(LEFT_ALIGNMENT);
        panel.add(labelName);
        
        textName = new JTextField();
        textName.setAlignmentX(CENTER_ALIGNMENT);
        panel.add(textName);
        
        panel.add(Box.createVerticalGlue());
        
        JLabel labelDescription = new JLabel("Descripcion : ");
        labelDescription.setAlignmentX(LEFT_ALIGNMENT);
        panel.add(labelDescription);
        
        textDescription = new JTextArea(10, 20);
        textDescription.setAlignmentX(CENTER_ALIGNMENT);
        panel.add(textDescription);
        
        panel.setBorder(new TitledBorder("Datos de la pelicula"));
        
        return panel;
    }
    
    private JTextField textName;
    private JTextArea textDescription;

    private JPanel getPanelSchedule() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        JPanel controls = new JPanel();
        controls.setLayout(new BoxLayout(controls, BoxLayout.X_AXIS));
        
        JLabel labelInitHour = new JLabel("Inicio : ");
        JLabel labelFinishHour = new JLabel("Fin : ");
        JLabel labelSeparator = new JLabel(":");
        
        spinnerInitHour = new JSpinner(new SpinnerNumberModel(0, 0, 23, 1));
        ((JSpinner.DefaultEditor)spinnerInitHour.getEditor()).getTextField().setEditable(false);
        spinnerInitMinute = new JSpinner(new SpinnerNumberModel(0, 0, 59, 1));
        ((JSpinner.DefaultEditor)spinnerInitMinute.getEditor()).getTextField().setEditable(false);
        spinnerFinishHour = new JSpinner(new SpinnerNumberModel(0, 0, 23, 1));
        ((JSpinner.DefaultEditor)spinnerFinishHour.getEditor()).getTextField().setEditable(false);
        spinnerFinishMinute = new JSpinner(new SpinnerNumberModel(0, 0, 59, 1));
        ((JSpinner.DefaultEditor)spinnerFinishMinute.getEditor()).getTextField().setEditable(false);
        
        controls.add(labelInitHour);
        controls.add(spinnerInitHour);
        controls.add(labelSeparator);
        controls.add(spinnerInitMinute);
        
        controls.add(Box.createHorizontalGlue());
        
        controls.add(labelFinishHour);
        controls.add(spinnerFinishHour);
        controls.add(labelSeparator);
        controls.add(spinnerFinishMinute);
        
        panel.add(Box.createVerticalGlue());
        panel.add(controls);
        panel.add(Box.createVerticalGlue());
        
        panel.setBorder(new TitledBorder("Horario"));
        
        return panel;
    }
    
    private JSpinner spinnerInitHour;
    private JSpinner spinnerInitMinute;
    private JSpinner spinnerFinishHour;
    private JSpinner spinnerFinishMinute;

    private JPanel getPanelImage() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        
        JButton buttonImageChooser = new JButton("Selecciona de tu biblioteca");
        buttonImageChooser.setAlignmentX(CENTER_ALIGNMENT);
        buttonImageChooser.addActionListener(listenerImageChooser);
        
        JPanel panelSelectedImage = new JPanel();
        panelSelectedImage.setLayout(new BoxLayout(panelSelectedImage, BoxLayout.X_AXIS));
        
        JLabel labelSelectedImage = new JLabel("Imagen Seleccionada : ");
        labelImageName = new JLabel("No has seleccionado una imagen");
        
        panelSelectedImage.add(labelSelectedImage);
        panelSelectedImage.add(Box.createHorizontalGlue());
        panelSelectedImage.add(labelImageName);
        
        panel.add(buttonImageChooser);
        panel.add(panelSelectedImage);
        
        panel.setBorder(new TitledBorder("Imagen"));
        
        return panel;
    }

    private JLabel labelImageName;
    
    private JPanel getFooterPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
        
        JButton buttonRegister = new JButton("Registrar");
        buttonRegister.addActionListener(listenerRegister);
        
        panel.add(Box.createHorizontalGlue());
        panel.add(buttonRegister);
        
        return panel;
    }

    private JPanel getPanelHeader() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
        
        JLabel title = new JLabel("Registra una pelicula");
        title.setAlignmentX(CENTER_ALIGNMENT);
        panel.add(title);
        
        return panel;
    }
    
    private ActionListener listenerImageChooser = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("IMAGE ONLY", "jpg", "png"));
            fileChooser.setAcceptAllFileFilterUsed(false);
                int dialogSatate = fileChooser.showDialog(content, "Seleccionar");
                if (dialogSatate == JFileChooser.APPROVE_OPTION) {
                    File image = fileChooser.getSelectedFile();
                    if (image != null) {
                        String imageName = image.getName();
                        labelImageName.setText(imageName);
                    } else {
                        showMessage("Selecciona Algo");
                    }
                } else {
                    System.out.println("Cancelled");
                }
        }
    };
    
    private ActionListener listenerRegister = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            registerFunction();
        }
    };
    
        public void registerFunction() {
        boolean validFields = validateFields();

        if (validFields) {

            Movie movie = new Movie("0", textName.getText(), textDescription.getText());
            Room room = new Room(5, 10);
            String scheduleTemplate = "Inicio %d : %d , Fin %d : %d";
            String schedule = String.format(scheduleTemplate,
                    getNumber(spinnerInitHour),
                    getNumber(spinnerInitMinute),
                    getNumber(spinnerFinishHour),
                    getNumber(spinnerFinishMinute));
            CinemaFunction function = new CinemaFunction(room, movie, schedule);

        }
    }
        
        private boolean validateFields() {
        if (this.textName.getText().isEmpty()) {
            showMessage("Ingresa un nombre");
            return false;
        }
        if (this.textDescription.getText().isEmpty()) {
            showMessage("Ingresa una descripcion");
            return false;
        }
        int initHour;
        int initMinute;
        int finishHour;
        int finishMinute;
        try {
            initHour = getNumber(spinnerInitHour);
            initMinute = getNumber(spinnerInitMinute);
            finishHour = getNumber(spinnerFinishHour);
            finishMinute = getNumber(spinnerFinishMinute);
        } catch (NumberFormatException exception) {
            showMessage("Ingresa horarios validos");
            return false;
        }
        if (initHour < 0 || initHour > 23 || finishHour < 0 || finishHour > 23) {
            showMessage("Ingresa Horas Validas");
            return false;
        }
        if (initMinute < 0 || initMinute > 59 || finishMinute < 0 || finishMinute > 59) {
            showMessage("Ingresa Minutos Validos");
            return false;
        }
        if (labelImageName.getText().isEmpty()) {
            showMessage("Selecciona una imagen");
            return false;
        }
        return true;
    }

    private void showMessage(String message) {
        JOptionPane.showMessageDialog(null, message);
    }

    private int getNumber(JSpinner spinnerNumber) throws NumberFormatException {
        return Integer.parseInt(spinnerNumber.getValue().toString());
    }

}
